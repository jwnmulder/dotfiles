{{- if and (.is_desktop) (eq .chezmoi.os "windows") -}}
#Requires -Modules @{ ModuleName="Microsoft.PowerShell.PSResourceGet"; ModuleVersion="1.0.0" }

Import-Module -Name "Microsoft.PowerShell.PSResourceGet"

$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
$isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

#region winget
if (Get-Command winget -ErrorAction SilentlyContinue) {

    $cmdUser = "winget upgrade --all --silent --accept-package-agreements --accept-source-agreements --scope=user"
    $cmdMachine = "gsudo winget upgrade --all --silent --accept-package-agreements --accept-source-agreements"

    if (-not $isAdmin) {
        Write-Host "# winget[user] - Running $cmdUser"
        Invoke-Expression $cmdUser
        Write-Host "# winget[user] - Done running $cmdUser" -ForegroundColor Green
    } else {
        Write-Host "# winget[user] - Skipping $cmdUser as we are running as Administrator" -ForegroundColor Cyan
    }

    if (Get-Command gsudo -ErrorAction SilentlyContinue) {
        Write-Host "# winget[machine] - Running $cmdMachine"
        Invoke-Expression $cmdMachine
        Write-Host "# winget[machine] - Done running $cmdMachine" -ForegroundColor Green
    }
}
#endregion

#region scoop
if (Get-Command scoop -ErrorAction SilentlyContinue) {

    $cmd = "scoop update --all"

    if ($isAdmin) {

        Write-Host "# scoop - Skipping $cmd as we are running as Administrator" -ForegroundColor Cyan

    } else {

        Write-Host "# scoop - Ensure correct permissions $cmd"
        takeown /f $env:USERPROFILE\scoop\buckets /r >$null

        Write-Host "# scoop - Running $cmd"
        Invoke-Expression $cmd
        Write-Host "# scoop - Done running $cmd" -ForegroundColor Green
    }
}
#endregion

#region kubectl-krew
if (Get-Command kubectl-krew -ErrorAction SilentlyContinue) {

    $cmd = "kubectl-krew upgrade"

    if ($isAdmin) {

        Write-Host "# kubectl-krew - Skipping $cmd as we are running as Administrator" -ForegroundColor Cyan

    } else {
        Write-Host "# kubectl-krew - Running $cmd"
        Invoke-Expression $cmd
        Write-Host "# kubectl-krew - Done running $cmd" -ForegroundColor Green
    }
}
#endregion

#region python tools
if (Get-Command uv.exe -ErrorAction SilentlyContinue) {
    $cmd = "uv tool upgrade --all"

    if ($isAdmin) {

        Write-Host "# uvx - Skipping $cmd as we are running as Administrator" -ForegroundColor Cyan

    } else {
        Write-Host "# uvx - Running $cmd"
        Invoke-Expression $cmd
        Write-Host "# uvx - Done running $cmd" -ForegroundColor Green
    }
}
#endregion

#region powershell resources
Write-Host "# pwsh - Updating powershell resources"

# Normally Update-PSResource only would suffice
# It will break however if there is a installed resource that has only a pre-release
$resourcesToUpdate = Get-InstalledPSResource -Scope CurrentUser |
    Where-Object { $_.Name -ne "Microsoft.Windows.Developer" } | # no stable version available
    Sort-Object -Unique
if ($resourcesToUpdate) {

    if (-not $isAdmin) {
        Write-Host "# pwsh - Running Update-PSResource -Scope CurrentUser"
        Update-PSResource -Scope CurrentUser -Name $resourcesToUpdate.Name
    } else {
        Write-Host "# pwsh - Running Update-PSResource"
        Update-PSResource -Name $resourcesToUpdate.Name
    }
}

Write-Host "# pwsh - Cleanup of old powershell module & script versions"

$installedPSResourcesGrouped = Get-InstalledPSResource -Scope CurrentUser | Group-Object Name
foreach ($group in $installedPSResourcesGrouped) {
    $sortedVersions = $group.Group | Sort-Object Version -Descending

    # Skip the first (latest) version, uninstall the rest
    $sortedVersions[1..$sortedVersions.Count] | ForEach-Object {
        Write-Host "Uninstalling $($_.Name) version $($_.Version)..."
        Uninstall-PSResource -Scope CurrentUser -Name $_.Name -Version $_.Version -Confirm:$false
    }
}

Remove-Variable -Name "resourcesToUpdate"
Remove-Variable -Name "installedPSResourcesGrouped"

Write-Host "# pwsh - Done updating powershell resources" -ForegroundColor Green
#endregion

Write-Host "do-upgrade-all - All done"

{{ end }}
